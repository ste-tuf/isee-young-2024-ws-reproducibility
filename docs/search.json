[
  {
    "objectID": "content/00_pre-ws.html",
    "href": "content/00_pre-ws.html",
    "title": "Pre-workshop instructions",
    "section": "",
    "text": "Windows: Download the R installer from the CRAN website. Follow the installation instructions.\nMac: Download the R installer from the CRAN website. Follow the installation procedure.\nLinux: R is typically available through the package manager of your Linux distribution. On Ubuntu you can use the following command in your terminal:\n sudo apt-get install r-base r-base-dev # Optional but recommended\nFor help during the installation, refer to the R Installation and Administration documentation.\n\n\n\n\nDownload the RStudio installer from the RStudio Download page. Choose the appropriate version for your operating system and follow the installation instructions provided.\nFor alternative IDEs like Visual Studio Code, download and install according to your preferences.\n\n\n\n\nWindows: Download the Git installer from the Git Downloads website. Follow the installation instructions provided. Ensure that the Git GUI component is selected during installation.\nMac: Download the installer from the Git Downloads page and follow the installation instructions. As detailed on this page you will need to install git-gui using homebrew: brew install git-gui\nLinux: Install Git using your package manager. On Ubuntu, use the following command:\nsudo apt-get install git git-gui\nFor detailed installation instructions, refer to the Git Installation documentation."
  },
  {
    "objectID": "content/00_pre-ws.html#r-version-4.3.0-or-later",
    "href": "content/00_pre-ws.html#r-version-4.3.0-or-later",
    "title": "Pre-workshop instructions",
    "section": "",
    "text": "Windows: Download the R installer from the CRAN website. Follow the installation instructions.\nMac: Download the R installer from the CRAN website. Follow the installation procedure.\nLinux: R is typically available through the package manager of your Linux distribution. On Ubuntu you can use the following command in your terminal:\n sudo apt-get install r-base r-base-dev # Optional but recommended\nFor help during the installation, refer to the R Installation and Administration documentation."
  },
  {
    "objectID": "content/00_pre-ws.html#rstudio-version-2023.03-or-later---windows-mac-linux",
    "href": "content/00_pre-ws.html#rstudio-version-2023.03-or-later---windows-mac-linux",
    "title": "Pre-workshop instructions",
    "section": "",
    "text": "Download the RStudio installer from the RStudio Download page. Choose the appropriate version for your operating system and follow the installation instructions provided.\nFor alternative IDEs like Visual Studio Code, download and install according to your preferences."
  },
  {
    "objectID": "content/00_pre-ws.html#git-and-git-gui-version-2.40.0",
    "href": "content/00_pre-ws.html#git-and-git-gui-version-2.40.0",
    "title": "Pre-workshop instructions",
    "section": "",
    "text": "Windows: Download the Git installer from the Git Downloads website. Follow the installation instructions provided. Ensure that the Git GUI component is selected during installation.\nMac: Download the installer from the Git Downloads page and follow the installation instructions. As detailed on this page you will need to install git-gui using homebrew: brew install git-gui\nLinux: Install Git using your package manager. On Ubuntu, use the following command:\nsudo apt-get install git git-gui\nFor detailed installation instructions, refer to the Git Installation documentation."
  },
  {
    "objectID": "content/01_intro.html",
    "href": "content/01_intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Slides\n\n\n\n\n\nGeneral context\nThe ultimate aim of this workshop is to make you able to start creating data analysis projects that are:\n\nself-contained (within a single folder)\nhave a record of changes made to the files\nmake it easier for others to collaborate\nmake it simpler to connect the project with a scientific output like a paper\nto structure analyses to be more reproducible (or at least more easily inspectable).\n\nThis is will:\n\nimprove transparency of your reseach project\nmake it easier to share both with your research team but also public, funding agency and other researcher\nfacilitate the assessment of the quality of your work including peer review.\n\nReproducible research is not just about R but more about research practices. We will do many non R things in this workshop."
  },
  {
    "objectID": "content/01_slides_intro.html#section",
    "href": "content/01_slides_intro.html#section",
    "title": "Introduction",
    "section": "",
    "text": "https://xkcd.com/2298"
  },
  {
    "objectID": "content/01_slides_intro.html#section-1",
    "href": "content/01_slides_intro.html#section-1",
    "title": "Introduction",
    "section": "❔",
    "text": "❔\n… or about open access, open data, open methods/protocols, or open source?\nHow many of you have read a method in a paper and wondered how they actually did it?\nHave you ever received confusing code? Or maybe written your own confusing code?"
  },
  {
    "objectID": "content/01_slides_intro.html#reproducibility",
    "href": "content/01_slides_intro.html#reproducibility",
    "title": "Introduction",
    "section": "Reproducibility",
    "text": "Reproducibility\n\nReproducibility\n\nObtain consistent results using the same data and code as the original study.\n\nReplicability\n\nObtain consistent results across studies aimed at answering the same scientific question using new data or other new computational methods.\n\n\n\nNational Academies of Sciences (2019)\n\n\nUnreplicability can be useful to science and help build knowledge.\n\nDomain of study\nComplex / unknown systems\nResearchers choices:\n\nStudy design\nMistakes\nMisconduct\nPoor reporting and publication bias\n\n\nSource of not useful non-replication:\n\npublication bias\nmisaligned incentives\ninappropriate statistical inference\npoor study design\nerrors\nincomplete reporting of a study"
  },
  {
    "objectID": "content/01_slides_intro.html#reproducibility-1",
    "href": "content/01_slides_intro.html#reproducibility-1",
    "title": "Introduction",
    "section": "Reproducibility",
    "text": "Reproducibility\nRelated to data collection, computation, and analysis:\n\nData acquisition\nData management\nAnalysis\nReporting results\n\n\n\n\n\n\n\nImportant\n\n\nAlmost all the steps of an epidemiology study can be involved!"
  },
  {
    "objectID": "content/01_slides_intro.html#reproducibility-2",
    "href": "content/01_slides_intro.html#reproducibility-2",
    "title": "Introduction",
    "section": "Reproducibility",
    "text": "Reproducibility\n\n\nPeng (2011)"
  },
  {
    "objectID": "content/01_slides_intro.html#workshop-organization",
    "href": "content/01_slides_intro.html#workshop-organization",
    "title": "Introduction",
    "section": "Workshop organization",
    "text": "Workshop organization\nA little bit of theory and lots of hands-on exercises. Each part of the workshop has a dedicated page where you can find slides and instructions.\n\nIntroduction (20 minutes): a little bit of theory\nHands-on Activity 1: a simple reproducible project (40 minutes)\nBreak (30 minutes)\nHands-on Activity 2: create a nice report (50 minutes)\nClosing Remarks and Q&A (15 minutes)"
  },
  {
    "objectID": "content/01_slides_intro.html#getting-help",
    "href": "content/01_slides_intro.html#getting-help",
    "title": "Introduction",
    "section": "Getting help",
    "text": "Getting help\n\nMaybe your teammates can help\nPut a sticker on your computer if you need assistance\nRaise your hand\nNo stupid questions—we’re all learning here, including me\n\nBe open-minded\nBe supportive\nBe inclusive"
  },
  {
    "objectID": "content/01_slides_intro.html#lets-form-teams-of-3",
    "href": "content/01_slides_intro.html#lets-form-teams-of-3",
    "title": "Introduction",
    "section": "Let’s form teams of 3",
    "text": "Let’s form teams of 3\n\nHave you ever created and used custom functions in R?\nDo you ever have use map functions from purrr of base R?\nHave you ever created a report using RMarkdown, Quarto or Jupyter notebook?\n\nIf you answered “No” to all three questions: Beginner\nIf you answered “Yes” to one or two questions: Intermediate\nIf you answered “Yes” to all three questions: Advanced\n\nLet’s mix things up and get to know each other! We’ll form teams of 3 with varying levels of R experience."
  },
  {
    "objectID": "content/01_slides_intro.html#references",
    "href": "content/01_slides_intro.html#references",
    "title": "Introduction",
    "section": "References",
    "text": "References\n\n\n\n\n\n\nNational Academies of Sciences, Engineering, and Medicine. 2019. Reproducibility and Replicability in Science. Washington, DC: The National Academies Press. https://doi.org/10.17226/25303.\n\n\nPeng, Roger D. 2011. “Reproducible Research in Computational Science.” Science 334 (6060): 1226–27. https://doi.org/10.1126/science.1213847."
  },
  {
    "objectID": "content/02_exercise_1.html",
    "href": "content/02_exercise_1.html",
    "title": "Hands-on Activity 1",
    "section": "",
    "text": "Creating a simple reproducible project"
  },
  {
    "objectID": "content/02_exercise_1.html#initialize-git-repository",
    "href": "content/02_exercise_1.html#initialize-git-repository",
    "title": "Hands-on Activity 1",
    "section": "Initialize git repository",
    "text": "Initialize git repository\nNavigate to the nwely created folder, it should be all empty. You can right click in the folder and click on Git GUI here.\n\nThis will open a small widow where we can create a new git repository. The name of the workshop folder should already be there but you can add it manually if needed. You can also launch Git GUI directly from Windows start menu.\n\n\n\n\n\n\n\n\n\n\nOnce the repository created you should see the main Git GUI interface:\n\n\n\n\n\nThe interface is divided in several parts:\n\nshow the files in your working folder\nwill display modification to file that can be staged\nshow the file and lines in the stage are of the git repository\nis where you can create a comit message before commiting the staged files\n\nPlease note the Rescan button which will help actualise the state of the working folder.\nWe can keep this windows open and we will return to it as we advance.\nBefore adding things to git we need to configure you credentials. Click on Edit &gt; Options to open the following window:\n\n\n\n\n\nHere you can setup your User Name and Email both for the curent proejct or for all git projects\n\nThis step can also be done using by typing the following command in the git command line namely Git Bash.\n\n# GIT bash\ngit config --global user.name \"First Last\"\ngit config --global user.email \"first.last@example.com\n\n\n\n\n\n\n\nTip\n\n\n\nYou can also initialize git repository when creating a R Studio project."
  },
  {
    "objectID": "content/02_exercise_1.html#create-a-rstudio-project",
    "href": "content/02_exercise_1.html#create-a-rstudio-project",
    "title": "Hands-on Activity 1",
    "section": "Create a Rstudio project",
    "text": "Create a Rstudio project\nNow let’s open RStudio to also initiate a Rproject. Click on “New project” in the project menu on the top right corner. Then select “Project in existing directory” and indicate the path of the workshop folder. The project should open itself.\nEach Rstudio project can be configured. You can either click on the .Rproj file within RStudio or click on Project option in the tools menu.\nIt’s usally to turn off the saving of the workspace to .Rdata as this avoid issue with old data from previous days to be loaded automatically each time you open the project which can cause a lot of issues. It’s always better to rerun the scripts form scratch."
  },
  {
    "objectID": "content/02_exercise_1.html#adding-folder-and-files",
    "href": "content/02_exercise_1.html#adding-folder-and-files",
    "title": "Hands-on Activity 1",
    "section": "Adding folder and files",
    "text": "Adding folder and files\nNow that we have setup both git and RStudio, let’s add the minimun set of folders and files.\n\nFolders:\n\ndata/: the two datasets nh2007 and nh2009 can be put here\nR/: keep the folder empty for now\nscripts/: copy starting_script.R here\n\nFiles:\n\nREADME: at the root ot the project folder. You can open it in R Studio and add a very short description of the project.\n\nscripts/README.md, optional to add some information on the script we can find in this folder\n\n.gitignore: at the root of the project folder. It can contain a list of files that git should ignore. You can open it in RStudio and add the following lines:\n\n\n# History files\n.Rhistory\n.Rapp.history\n\n# Session Data files\n.RData\n.RDataTmp\n\n# User-specific files\n.Ruserdata\n\n# RStudio files\n.Rproj.user/\n\n# R Environment Variables\n.Renviron\nThis will prevent git from following the modification of these files that are only temporary and not related to the analysis.\nThe folder should look like that:"
  },
  {
    "objectID": "content/02_exercise_1.html#files-added-by-git",
    "href": "content/02_exercise_1.html#files-added-by-git",
    "title": "Hands-on Activity 1",
    "section": "Files added by git",
    "text": "Files added by git\nProject\n├── .git/ &lt;-- Git repository stored here (eg data about changes)\n├── R/\n├── data/\n|   ├──  nh2007.Rdata\n|   └──   nh2009.Rdata\nscripts/\n|   ├──starting_script.R\n|   └──  README.md\n├── .gitignore \n├── Project.Rproj\n└── README.md"
  },
  {
    "objectID": "content/02_exercise_1.html#loading-the-data",
    "href": "content/02_exercise_1.html#loading-the-data",
    "title": "Hands-on Activity 1",
    "section": "Loading the data",
    "text": "Loading the data\nIt’s time to look at the analysis script. You can try to make it run as it is.\nBut in the first 3 lines:\n\nlibrary(tidyverse)\n\nsetwd(\"C:/folder/isee-analysis/\")\nnh2007 &lt;- load(\"C:/folder/isee-analysis/nh2007.Rdata\")\n\nExercice: Can you spot the issue there? How can we improve the loading of the data within the project directory?\n\n\n\n\n\n\nSolution\n\n\n\n\n\nSince we have setup RStudio and we are working within a project, the working directory is the project folder. Therefore we can just specify the path to follow within the folder (e.g. a relative path):\n\nnh2007 &lt;- load(\"data/nh2007.Rdata\")\n\nThis will work on any computer with the same project folder. Relative paths can also be used when sourcing R scripts."
  },
  {
    "objectID": "content/02_exercise_1.html#script-style",
    "href": "content/02_exercise_1.html#script-style",
    "title": "Hands-on Activity 1",
    "section": "Script style",
    "text": "Script style\nQuestion: What can you notice regarding the coding style used in the script?\n\nIs it consistent?\nDoes it match the tidyverse style guidelines?\n\n\n# ...\nnh2007$id&lt;-factor(nh2007$id)\nnh2007$gender&lt;-factor(nh2007$gender)\n# ...\nnh2007$asthma&lt;- nh2007$asthma%in%1\nnh2007$cancer&lt;-nh2007$cancer%in%1\nnh2007$cancer &lt;- nh2007$cancer %in% 1\n# ....\nmodel.1a &lt;- glm(asthma ~ barium + age_screening + gender,data=nh2007)\nmodel.1.b &lt;- glm(heart_failure ~ barium +age_screening+gender, data = nh2007)\nmodel.1.c&lt;-glm(coronary_heart_disease ~barium + age_screening + gender,data=nh2007)\nlead2a &lt;- glm(asthma~lead + age_screening + gender, data = nh2007)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nWe can notice:\n\nInconsistent spacing in the formulas\nVariations in the names of the models\nGeneral lack of comments\nA lot of copy pasting to repeat the same action for differents variables\n\n\n\n\nWe can use styler to reformat the whole code:\n\n\n\n\n\nThe code will look much better:\n\n# ...\nnh2007$id &lt;- factor(nh2007$id)\nnh2007$gender &lt;- factor(nh2007$gender)\n# ...\nnh2007$asthma &lt;- nh2007$asthma %in% 1\nnh2007$heart_failure &lt;- nh2007$heart_failure %in% 1\nnh2007$coronary_heart_disease &lt;- nh2007$coronary_heart_disease %in% 1\nnh2007$heart_attack &lt;- nh2007$heart_attack %in% 1\nnh2007$stroke &lt;- nh2007$stroke %in% 1\nnh2007$chronic_bronchitis &lt;- nh2007$chronic_bronchitis %in% 1\nnh2007$cancer &lt;- nh2007$cancer %in% 1\n# ....\nmodel.1a &lt;- glm(asthma ~ barium + age_screening + gender, data = nh2007)\nmodel.1.b &lt;- glm(heart_failure ~ barium + age_screening + gender, data = nh2007)\nmodel.1.c &lt;- glm(coronary_heart_disease ~ barium + age_screening + gender, data = nh2007)\nlead2a &lt;- glm(asthma ~ lead + age_screening + gender, data = nh2007)\n\nWe can further change the models names to make them more consitent and informative:\n\nmodel_barium_asthma &lt;- glm(asthma ~ barium + age_screening + gender, data = nh2007)\nmodel_barium_hf &lt;- glm(heart_failure ~ barium + age_screening + gender, data = nh2007)\nmodel_barium_chd &lt;- glm(coronary_heart_disease ~ barium + age_screening + gender, data = nh2007)\nmodel_lead_asthma &lt;- glm(asthma ~ lead + age_screening + gender, data = nh2007)\n\nThis will be very convenient when we will make function to extract models using their names.\nNow the script should work and is a little bit cleaner. Instead of saving the script as a new file we can save our modification in git: let’s do a second comit!\n\n\n\n\n\nfirst save the script, then switch to Git Gui, click on rescan (or F5), and now starting_script.r should appear in the unstaged file, and you can see the modification you just made to the file on the right side. If you like the modifications, you can add the modified script to the staged area (see # You first commit), add a commit message like “Apply tidyverse style guide” and commit. In the history you will see that you second commit has been added on top of the first one.\nNotice that if you right click on the first commit you have many option including to navigate your history and change the copy of the files you are working on."
  },
  {
    "objectID": "content/02_exercise_1.html#extensions-of-the-functions",
    "href": "content/02_exercise_1.html#extensions-of-the-functions",
    "title": "Hands-on Activity 1",
    "section": "Extensions of the functions",
    "text": "Extensions of the functions\nDiscuss which possible extensions and modifications are possible:\n\ncreate plots for each type of variable using ggplot2\nadding other statistical measures\n\nExercise: create a new descriptive statistics function that includes at least one additional feature not covered previously."
  },
  {
    "objectID": "content/02_slides_theory_1.html#section",
    "href": "content/02_slides_theory_1.html#section",
    "title": "Hands-on Activity 1 - Theory",
    "section": "",
    "text": "Project orgnisation\nR style guide\nGit\nIntroduction to functions"
  },
  {
    "objectID": "content/02_slides_theory_1.html#projects-1",
    "href": "content/02_slides_theory_1.html#projects-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Projects",
    "text": "Projects\nRStudio natively support project oriented wrokflow\nAdvantages:\n\nThe working directory is set by RStudio to the project folder.\nIt is easy to switch between projects from the drop-down menu.\n\n\n\nhttps://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects"
  },
  {
    "objectID": "content/02_slides_theory_1.html#project-organisation",
    "href": "content/02_slides_theory_1.html#project-organisation",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Project organisation",
    "text": "Project organisation\nNot a single organization fits everybody’s needs, but being consistent throughout different projects or research groups helps collaboration."
  },
  {
    "objectID": "content/02_slides_theory_1.html#directories",
    "href": "content/02_slides_theory_1.html#directories",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Directories",
    "text": "Directories\n\ndata/: Ready-to-analyze dataset, intermediate datasets.\ndata-raw/: Data from the outside world untouched. Can contain scripts to import data from the internet and prepare it.\nR/: R files containing functions. python/ for Python.\nscripts/ or code/: Scripts for things that need to be run once.\nqmd/, md/, Rmd/: Quarto and markdown documents."
  },
  {
    "objectID": "content/02_slides_theory_1.html#directories-1",
    "href": "content/02_slides_theory_1.html#directories-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Directories",
    "text": "Directories\n\noutput/: Folder with outputs, can contain images, graphs, or other stuff.\nfigs/: Folder with figures produced by your scripts.\nresults/: Results from the project, e.g., CSV tables.\ndocs/: Documentation or rendered documents.\nman/: Documentation for R packages.\nextra/: Extra, non-code, files.\n\n\nhttps://rfortherestofus.com/2021/08/rstudio-project-structure\nhttps://www.stat.ubc.ca/~jenny/STAT545A/block19_codeFormattingOrganization.html\nhttps://joshua.wilsonblack.nz/post/organising-r-projects/\ndata-raw/\n├── README.md\n├── mmash\n│   ├── user_1\n│   ├── user_10\n│   ├── user_11\n│   ├── ...\n│   ├── user_7\n│   ├── user_8\n│   └── user_9\n├── mmash-data.zip\n└── mmash.R"
  },
  {
    "objectID": "content/02_slides_theory_1.html#files",
    "href": "content/02_slides_theory_1.html#files",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Files",
    "text": "Files\n\nREADME: Must-read file. At least one in the project directory, but can be added to any folder.\nLICENSE: License file for your project.\n.gitignore: List of files that Git should ignore."
  },
  {
    "objectID": "content/02_slides_theory_1.html#naming-files",
    "href": "content/02_slides_theory_1.html#naming-files",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Naming files",
    "text": "Naming files\nHuman and machine-readable.\n\nDates: YYYY-MM-DD (ISO format).\nEasy to order, use double digits.\nSeparate name elements to make them easy to subset with files functions.\nName should be regular expression friendly: avoid spaces, punctuation, accented characters, and case sensitivity."
  },
  {
    "objectID": "content/02_slides_theory_1.html#naming-files-1",
    "href": "content/02_slides_theory_1.html#naming-files-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Naming files",
    "text": "Naming files\nSome examples\n2024-04-01_air-pollution_PM25.csv \n2024-04-01_air-pollution_NO2.csv \n2021-04-01_air-pollution_PM25.csv \n2021-04-01_air-pollution_NO2.csv\nThis faciliate this kind of operations:"
  },
  {
    "objectID": "content/02_slides_theory_1.html#naming-files-2",
    "href": "content/02_slides_theory_1.html#naming-files-2",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Naming files",
    "text": "Naming files\nMore examples\n\n\n# Bad\nalternative model.R\ncode for exploratory analysis.r\nfinalreport.qmd\nFinalReport.qmd\nFilenames Use Spaces and Punctuation.xlsx\nfig 1.png\nFigure_02.png\nfigure 1.png\nfig 2.png\nJW7d^(2sl@deletethisandyourcareerisoverWx2*.txt\nmodel_first_try.R\nmyabstract.docx\nrun-first.r\ntemp.txt\n\n# Good\nother/2014-06-08_abstract-for-sla.docx\nother/filenames-are-getting-better.xlsx\n01-load-data.R\n02-exploratory-analysis.R\n03-model-approach-1.R\n04-model-approach-2.R\nfig-01.png\nfig-02.png\nfig01_scatterplot-talk-length-vs-interest.png\nfig02_histogram-talk-attendance.png\nreport-2022-03-20.qmd\nreport-2022-04-02.qmd\nreport-draft-notes.txt\n\n\n\nhttps://r4ds.hadley.nz/workflow-scripts#saving-and-naming\nhttps://rstats.wtf/source-and-blank-slates"
  },
  {
    "objectID": "content/02_slides_theory_1.html#improve-r-code",
    "href": "content/02_slides_theory_1.html#improve-r-code",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Improve R code",
    "text": "Improve R code"
  },
  {
    "objectID": "content/02_slides_theory_1.html#style-guide",
    "href": "content/02_slides_theory_1.html#style-guide",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Style guide",
    "text": "Style guide\nWhy adopt a coding style:\n\nConsistency\nMakes code easier to write (fewer decisions when typing)\nEasier to read\n\n\n\n\n\n\n\nTip\n\n\nTidyverse style guide: https://style.tidyverse.org/"
  },
  {
    "objectID": "content/02_slides_theory_1.html#syntax",
    "href": "content/02_slides_theory_1.html#syntax",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Syntax",
    "text": "Syntax\n\nVariable and function names:\n\nOnly lowercase letters and numbers.\nUse _ to separate words within a name, e.g., day_one; day_1.\n\nSpace after a comma, e.g., mean(x, na.rm = TRUE).\nCurly braces, {}:\n\n{ should be the last character on the line.\nThe contents should be indented by two spaces.\n} should be the first character of the line."
  },
  {
    "objectID": "content/02_slides_theory_1.html#syntax-1",
    "href": "content/02_slides_theory_1.html#syntax-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Syntax",
    "text": "Syntax\nQuickly fix the syntax of your code using styler:"
  },
  {
    "objectID": "content/02_slides_theory_1.html#naming-things",
    "href": "content/02_slides_theory_1.html#naming-things",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Naming things",
    "text": "Naming things\n\nAvoid changing common R functions or objects.\n\nT &lt;- \"true\" \nc &lt;- \"true\"\nsum &lt;- function(x) mean(x)\n\nUse verbs for functions: do_something().\nNew line after a pipe (%&gt;% or |&gt;).\nPrefer using element names to retrieve object index instead of number indexing."
  },
  {
    "objectID": "content/02_slides_theory_1.html#naming-things-1",
    "href": "content/02_slides_theory_1.html#naming-things-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Naming things",
    "text": "Naming things"
  },
  {
    "objectID": "content/02_slides_theory_1.html#naming-things-2",
    "href": "content/02_slides_theory_1.html#naming-things-2",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Naming things",
    "text": "Naming things\nComment as you code, provide as much detail as you can. Your future self will thank you."
  },
  {
    "objectID": "content/02_slides_theory_1.html#classic-version-control",
    "href": "content/02_slides_theory_1.html#classic-version-control",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Classic version control",
    "text": "Classic version control\n\n\nManual version control system, Luke W. Johnston"
  },
  {
    "objectID": "content/02_slides_theory_1.html#classic-version-control-1",
    "href": "content/02_slides_theory_1.html#classic-version-control-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Classic version control",
    "text": "Classic version control"
  },
  {
    "objectID": "content/02_slides_theory_1.html#git",
    "href": "content/02_slides_theory_1.html#git",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Git",
    "text": "Git\n\nKeeps track of every change to a file.\nCan instantly restore any previous version of a file.\nAllows you to split your work into different branches for testing purposes.\nHandles merging files by comparing their modifications and resolving differences if any.\n\n\n\n\n\n\n\nTip\n\n\nWith Git, you only need one version of your files!"
  },
  {
    "objectID": "content/02_slides_theory_1.html#which-files",
    "href": "content/02_slides_theory_1.html#which-files",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Which files",
    "text": "Which files\nGit can track text files:\n\nR Script\n.csv\nMarkup documents like Markdown, Quarto, or LaTeX files\n\nConfigure a git repository for each project."
  },
  {
    "objectID": "content/02_slides_theory_1.html#terms-to-know",
    "href": "content/02_slides_theory_1.html#terms-to-know",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Terms to know",
    "text": "Terms to know\n\n\n\n\n\n%%{init:{'themeCSS': \".actor {stroke: DarkBlue;fill: White;stroke-width:1.5px;}\", 'sequence':{'mirrorActors': false}}}%%\n\nsequenceDiagram\n\n    participant W as Working folder\n\n    participant S as Staged\n\n    participant H as History\n\n    W-&gt;&gt;S: Add\n\n    S-&gt;&gt;H: Commit\n\n\n\nFigure 1: The three states that files and folders can be in, when using Git.\n\n\n\n\n\nrepository, repo: a folder tracked by git.\nworking folder: files not tracked by Git, or contain new modification not saved yet.\nadd: add files of modifications to be tracked by Git\ncommit: create a snapshot of changes and save it in Git history. Commits can have a short description of the changes"
  },
  {
    "objectID": "content/02_slides_theory_1.html#terms-to-know-1",
    "href": "content/02_slides_theory_1.html#terms-to-know-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Terms to know",
    "text": "Terms to know\n\n\n\n\n%%{init:{'themeCSS': \".actor {stroke: DarkBlue;fill: White;stroke-width:1.5px;}\", 'sequence':{'mirrorActors': false}}}%%\n\nsequenceDiagram\n\n    participant W as Working folder\n\n    participant S as Staged\n\n    participant H as History\n\n    W-&gt;&gt;S: Add\n\n    S-&gt;&gt;H: Commit\n\n\n\nThe three states that files and folders can be in, when using Git.\n\n\n\n\nstage: Files here are tracked by Git and can be put into the history with a commit.\nhistory: all the changes that have been commited. Everything that has been commited in the Git history will never be completely gone."
  },
  {
    "objectID": "content/02_slides_theory_1.html#terms-to-know-2",
    "href": "content/02_slides_theory_1.html#terms-to-know-2",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Terms to know",
    "text": "Terms to know\n\nlocal: refer to the repository that you store on your computer.\nremote: refer to the repository that are stored online like git hub.\nbranch: branches are parallel versions of your project. They allow you to experiment things without affecting the main project until you’re ready to merge them back.\nmerge: merging is the process of integrating changes from one branch into another. It combines the histories of both branches, creating a single, unified history."
  },
  {
    "objectID": "content/02_slides_theory_1.html#functions",
    "href": "content/02_slides_theory_1.html#functions",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Functions",
    "text": "Functions\n\nWhy write functions?\n\n\nAvoid repeatition\n\nGolden rule of programming: DRY - Don’t Repeat Yourself\nCreate function for actions that are often repeated:\n\nImport dataset\nCreate models\nExtract results from a model\nCreate tables"
  },
  {
    "objectID": "content/02_slides_theory_1.html#functions-1",
    "href": "content/02_slides_theory_1.html#functions-1",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Functions",
    "text": "Functions\n\n\n\n\n\n\nImportant\n\n\nA function is a bundled sequence of steps that achieve a specific action.\n\n\n\nFor example, + (add) is a function, mean() is a function …\nFunctions are made of a function call, its arguments, and the function body:\nmyfunction &lt;- function(argument1, argument2){ \n  # body of function with R code\n}\n\n\n\n\n\n\nTip\n\n\nType sd in R to see how sd() calculate standard deviation"
  },
  {
    "objectID": "content/02_slides_theory_1.html#functions-2",
    "href": "content/02_slides_theory_1.html#functions-2",
    "title": "Hands-on Activity 1 - Theory",
    "section": "Functions",
    "text": "Functions\nThe output of the function depends only on its inputs. Same inputs will give the same result.\nFunctions can replace loops and make your code much clearer.\nFunctions are easier to share between projects and can be gathered in a package."
  },
  {
    "objectID": "content/03_exercise_2.html#descriptive-statistics",
    "href": "content/03_exercise_2.html#descriptive-statistics",
    "title": "Hands-on Activity 2",
    "section": "Descriptive statistics",
    "text": "Descriptive statistics\nLet’s look at the script that we finish before the break. We created some functions that we now use for all the descriptive statistics. However we stil had to copy paste the call many times.\n\n# Numbers\ncompute_descriptive_stats(nh2007$gender)\ncompute_descriptive_stats(nh2007$education)\ncompute_descriptive_stats(nh2007$education_child)\ncompute_descriptive_stats(nh2007$asthma)\ncompute_descriptive_stats(nh2007$heart_failure)\ncompute_descriptive_stats(nh2007$coronary_heart_disease)\ncompute_descriptive_stats(nh2007$creatinine)\ncompute_descriptive_stats(nh2007$lead)\ncompute_descriptive_stats(nh2007$barium)\ncompute_descriptive_stats(nh2007$cadmium)\n\n\n# Graph\ncompute_descriptive_graph(nh2007$creatinine)\ncompute_descriptive_graph(nh2007$lead)\ncompute_descriptive_graph(nh2007$barium)\ncompute_descriptive_graph(nh2007$cadmium)\n\nExercice: Can you figure out how to use map to avoid copy pasting the call\n\n\n\n\n\n\nSolution\n\n\n\n\n\nmap can take a dataframe as first argument and will apply the function to each column of the data frame:\n\npurrr::map(.x = nh2007, .f = compute_descriptive_stats)\n\nFor the descriptive graphs we can first use dplyr::select() to select the four columns of interest:\n\nn2007 |&gt;\n  dplyr::select(creatinine, lead, barium, cadmium) |&gt;\n  purrr::map(, .f = compute_descriptive_graph)\n\n\n\n\nmap return a list by default:\n\npurrr::map(.x = nh2007, .f = compute_descriptive_stats) |&gt;\n  head(3)\n\n$id\n$id$mean\n[1] 46562.61\n\n$id$sd\n[1] 2966.326\n\n$id$quantiles\n      0%      25%      50%      75%     100% \n41477.00 44060.75 46513.00 49178.75 51622.00 \n\n\n$gender\nvariable\n   1    2 &lt;NA&gt; \n1022 1012    0 \n\n$age_screening\n$age_screening$mean\n[1] 47.41593\n\n$age_screening$sd\n[1] 19.2215\n\n$age_screening$quantiles\n  0%  25%  50%  75% 100% \n  16   31   47   63   80 \n\n\nList are not so easy to work with because functions are mainly build to use a dataframe. However it’s very easy to modify compute_table and compute_numeric to return statistics in a different format.\nWhen the two functions return a dataframe, it’s then possible to use dplyr::bind_rows() to bind all the elements of the list from map in a single dataframe.\nLet’s first change the two compute functions and load them in our environment:\n\ncompute_table &lt;- function(variable) {\n  # Return frequency table as a dataframe\n  table(variable, useNA = \"always\", dnn = \"level\") |&gt;\n    as.data.frame()\n}\n\ncompute_numeric &lt;- function(variable) {\n  mean_value &lt;- mean(variable, na.rm = TRUE)\n  sd_value &lt;- sd(variable, na.rm = TRUE)\n  quantiles &lt;- quantile(variable, na.rm = TRUE)\n\n  # Return statistics as a dataframe\n  cbind(\n    data.frame(\n      \"mean\" = mean_value,\n      \"sd\" = sd_value\n    ),\n    t(quantiles)\n  )\n}\n\nThen we can run again the lines with map:\n\npurrr::map(.x = nh2007, .f = compute_descriptive_stats) |&gt;\n  dplyr::bind_rows(.id = \"column\") |&gt;\n  head(5)\n\n         column        mean        sd    0%      25%   50%      75%  100% level\n1            id 46562.61406 2966.3259 41477 44060.75 46513 49178.75 51622  &lt;NA&gt;\n2        gender          NA        NA    NA       NA    NA       NA    NA     1\n3        gender          NA        NA    NA       NA    NA       NA    NA     2\n4        gender          NA        NA    NA       NA    NA       NA    NA  &lt;NA&gt;\n5 age_screening    47.41593   19.2215    16    31.00    47    63.00    80  &lt;NA&gt;\n  Freq\n1   NA\n2 1022\n3 1012\n4    0\n5   NA\n\n\nThe result is already much better and easier, notice that we didn’t had to change the compute_descriptive_stats() function but only the computation functions. This is because there is no calculation happening in compute_descriptive_stats(): it’s only calling the compute functions for each type of variable.\n\n\n\n\n\n\nTip\n\n\n\nWhen modifying functions, it’s a good idea to commit the new changes to be able to revert any bad changes.\nJump in Git-gui and commit the new changes to the functions. Repeat"
  },
  {
    "objectID": "content/03_exercise_2.html#models",
    "href": "content/03_exercise_2.html#models",
    "title": "Hands-on Activity 2",
    "section": "Models",
    "text": "Models\nWe can also use functionnal programming to simplify the creation of the models. For the 4 outcomes and the 4 exposures the models are always the same:\n\n# Creatinine\nmodel.1a &lt;- glm(asthma ~ barium + age_screening + gender, data = nh2007)\nmodel.1.b &lt;- glm(heart_failure ~ barium + age_screening + gender, data = nh2007)\nmodel.1.c &lt;- glm(coronary_heart_disease ~ barium + age_screening + gender, data = nh2007)\nmodel.1.d &lt;- glm(heart_attack ~ barium + age_screening + gender, data = nh2007)\nmodel.1.e &lt;- glm(asthma ~ barium + age_screening + gender, data = nh2007) # Notice that this model is identical to 1a, but it's hard to notice\n\nThe custom function to create need to have at least 2 arugments: one argument for the outcome and another for the exposure. It’s also a good idea to add another argument to specify the dataset to use in the model.\nmap2 and pmap are variant of map that can iterate over two or many arguments simultaneously.\nAll the functions that we will create can be saved in R/models.R, remember to source this file in your script.\nExercice: Create a function to build the glm models. Use map2 to apply the function for all combinaisons of outcomes and exposures.\n\n\n\n\n\n\nNote\n\n\n\ntidyr::expand_grid() create a table from a combinations of vectors. You should use it to get all the combinaison of outcomes and exposures\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt can be diffcult to create a function form scratch especially when working with list. It’s sometime easier to first works with one element of the list to test the function.\n\ntest_model &lt;- models[[1]]\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nbuild_model &lt;- function(outcome, exposure, dataset) {\n  formula &lt;- paste0(\n    outcome, \" ~ \",\n    exposure, \" + age_screening + gender\"\n  ) |&gt;\n    as.formula()\n\n  try(\n    glm(formula, data = dataset)\n  )\n}\n\n# List outcomes\noutcomes &lt;- c(\"asthma\", \"heart_failure\", \"coronary_heart_disease\", \"heart_attack\")\nexposures &lt;- c(\"creatinine\", \"lead\", \"barium\", \"cadmium\")\n\n\nmodels_parameters &lt;- tidyr::expand_grid(outcomes, exposures)\n\nmodels &lt;- map2(\n  .x = models_parameters$outcomes,\n  .y = models_parameters$exposures,\n  .f = \\(x, y) build_model(x, y, dataset = nh2007)\n)\n\n\ntry() helps when models don’t run for any reason. This allow map to continue instead of stoping\n.f = \\(x, y) build_model(x, y, dataset = nh2007) this line help passing a common element to all the models. Here it’s the dataset that we want to use for the models. Of course this dataset can also be passed using pmap but it can be a little bit tricky.\n\n\n\n\nOnce again all the models are in a list. It’s easy to access one model using indexes models[[1]] but it’s a bit crude. It possible to improve that by:\n\nassigning names to each list element from the model parameters, to access models using a $ sign.\nputting the models in a column in the models parameters dataframe (often a better solution)."
  },
  {
    "objectID": "content/03_exercise_2.html#extract-models-results",
    "href": "content/03_exercise_2.html#extract-models-results",
    "title": "Hands-on Activity 2",
    "section": "Extract models results",
    "text": "Extract models results\nExercice: Create a function to extract estimates, CI, p-pvalue and AIC from a model. Use map to apply it to every model.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nextract_model_result &lt;- function(model) {\n  # Get coefficients\n  coefs &lt;- coef(summary(model)) |&gt;\n    as.data.frame()\n\n  # confidence interval\n  ci &lt;- confint(model) |&gt;\n    as.data.frame()\n\n  # AIC\n  aic &lt;- model$aic\n\n  # Return a dataframe\n  cbind(\n    coefs,\n    ci,\n    aic\n  ) |&gt;\n    rownames_to_column(var = \"term\")\n}\n\n# Extract model results\nmodels_results &lt;- map(models, extract_model_result)\n\n\nexpand_grid() create a table from all combinations of inputs, it’s very usefull to get all the 21 models from the exposure and outcomes\n\nThe broom package is a very nice interface to reliably extract models results in a consistent way. It can easily replace this custom made function: https://broom.tidymodels.org/"
  },
  {
    "objectID": "content/03_exercise_2.html#prepare-the-data",
    "href": "content/03_exercise_2.html#prepare-the-data",
    "title": "Hands-on Activity 2",
    "section": "Prepare the data",
    "text": "Prepare the data\nIn this part, we will just do one table because gt package has many options and it can be the topic of a whole workshop. Feel to experiment with it later if you have time, for example to create a table for the descriptive statistics\nBefore creating a gt table, it’s best to have a clean table with only the informations that we want to present. First step is to regroup in one table the models parameters, models and models results.\n\nresults &lt;- models_parameters |&gt;\n  dplyr::mutate(\n    models = models,\n    models_results = models_results\n  )\n\nThen we can unnest() the models_results in the dataframe, and filter the terms from the model results to keep only the terme matching the exposure of the model.\n\nresults_short &lt;- results |&gt;\n  unnest(models_results) |&gt;\n  dplyr::filter(exposures == term) |&gt;\n  select(-models)\n\nhead(results_short)\n\n# A tibble: 6 × 10\n  outcomes   exposures term  Estimate `Std. Error` `t value` `Pr(&gt;|t|)`  `2.5 %`\n  &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;    &lt;dbl&gt;        &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n1 asthma     creatini… crea… -1.67e-4    0.000111    -1.50        0.135 -3.85e-4\n2 asthma     lead      lead   2.38e-3    0.00555      0.429       0.668 -8.49e-3\n3 asthma     barium    bari… -3.03e-3    0.00212     -1.43        0.153 -7.18e-3\n4 asthma     cadmium   cadm…  1.20e-3    0.0183       0.0654      0.948 -3.47e-2\n5 heart_fai… creatini… crea… -2.77e-5    0.0000542   -0.511       0.609 -1.34e-4\n6 heart_fai… lead      lead  -2.68e-3    0.00255     -1.05        0.293 -7.67e-3\n# ℹ 2 more variables: `97.5 %` &lt;dbl&gt;, aic &lt;dbl&gt;\n\n\nNow the table is simple and it’s possible to create a gt table and to go handle all the formating"
  },
  {
    "objectID": "content/03_exercise_2.html#create-the-gt-table",
    "href": "content/03_exercise_2.html#create-the-gt-table",
    "title": "Hands-on Activity 2",
    "section": "Create the gt table",
    "text": "Create the gt table\nIn order to create the table the following steps needs to be taken:\n\nInitialize the gt table object\n\n\nlibrary(gt)\n\nWarning: package 'gt' was built under R version 4.3.3\n\ngt_table &lt;- gt(\n  data = results_short,\n  rowname_col = \"Outcome\",\n  groupname_col = \"outcomes\"\n)\n\ngt_table\n\n\n\n\n\n  \n    \n      exposures\n      term\n      Estimate\n      Std. Error\n      t value\n      Pr(&gt;|t|)\n      2.5 %\n      97.5 %\n      aic\n    \n  \n  \n    \n      asthma\n    \n    creatinine\ncreatinine\n-1.666218e-04\n1.114468e-04\n-1.49507911\n0.135049228\n-0.0003850536\n5.180995e-05\n1802.2351\n    lead\nlead\n2.379870e-03\n5.548226e-03\n0.42894247\n0.668010610\n-0.0084944533\n1.325419e-02\n1804.2892\n    barium\nbarium\n-3.028811e-03\n2.117844e-03\n-1.43013881\n0.152831073\n-0.0071797093\n1.122087e-03\n1802.4252\n    cadmium\ncadmium\n1.198378e-03\n1.831328e-02\n0.06543767\n0.947831976\n-0.0346949935\n3.709175e-02\n1804.4692\n    \n      heart_failure\n    \n    creatinine\ncreatinine\n-2.772027e-05\n5.424036e-05\n-0.51106355\n0.609367443\n-0.0001340294\n7.858888e-05\n-1270.1983\n    lead\nlead\n-2.676537e-03\n2.545335e-03\n-1.05154615\n0.293144934\n-0.0076653009\n2.312227e-03\n-1271.0444\n    barium\nbarium\n-4.963558e-04\n9.896629e-04\n-0.50154023\n0.616050549\n-0.0024360595\n1.443348e-03\n-1270.1887\n    cadmium\ncadmium\n2.474920e-03\n8.393849e-03\n0.29484929\n0.768142044\n-0.0139767213\n1.892656e-02\n-1270.0237\n    \n      coronary_heart_disease\n    \n    creatinine\ncreatinine\n-4.562735e-05\n5.605650e-05\n-0.81395298\n0.415776468\n-0.0001554961\n6.424136e-05\n-1147.8785\n    lead\nlead\n-3.041374e-03\n2.630681e-03\n-1.15611644\n0.247782569\n-0.0081974150\n2.114667e-03\n-1148.5536\n    barium\nbarium\n-4.016007e-04\n1.022938e-03\n-0.39259548\n0.694663436\n-0.0024065216\n1.603320e-03\n-1147.3691\n    cadmium\ncadmium\n1.448436e-02\n8.669517e-03\n1.67072316\n0.094945244\n-0.0025075783\n3.147630e-02\n-1150.0099\n    \n      heart_attack\n    \n    creatinine\ncreatinine\n-5.655582e-06\n6.140079e-05\n-0.09210927\n0.926621182\n-0.0001259989\n1.146878e-04\n-809.6718\n    lead\nlead\n-3.008399e-03\n2.881167e-03\n-1.04415985\n0.296547637\n-0.0086553836\n2.638585e-03\n-810.7556\n    barium\nbarium\n-1.040694e-03\n1.120050e-03\n-0.92914986\n0.352932446\n-0.0032359522\n1.154563e-03\n-810.5283\n    cadmium\ncadmium\n2.642442e-02\n9.481671e-03\n2.78689532\n0.005375826\n0.0078406907\n4.500816e-02\n-817.4306\n  \n  \n  \n\n\n\n\n\nFormat numbers\n\n\ngt_table &lt;- gt_table |&gt;\n  fmt_number(\n    columns = c(\"Estimate\", \"2.5 %\", \"97.5 %\"),\n    decimals = 3\n  ) |&gt;\n  fmt(\n    columns = \"Pr(&gt;|t|)\",\n    fns = \\(x) format.pval(x, digits = 3)\n  )\n\n\nMerge and hide columns\n\n\ngt_table &lt;- gt_table |&gt;\n  cols_merge(\n    columns = c(\"2.5 %\", \"97.5 %\"),\n    pattern = \"{1} - {2}\"\n  ) |&gt;\n  cols_hide(\n    columns = c(\"Std. Error\", \"t value\", \"term\")\n  ) |&gt;\n  cols_label(\"2.5 %\" = \"95% CI\")\n\n\nAdd table title and subtitle\n\n\ngt_table &lt;- gt_table %&gt;%\n  tab_header(\n    title = \"Models results\",\n    subtitle = \"data = nh2007\"\n  )\n\ngt_table\n\n\n\n\n\n  \n    \n      Models results\n    \n    \n      data = nh2007\n    \n    \n      exposures\n      Estimate\n      Pr(&gt;|t|)\n      95% CI\n      aic\n    \n  \n  \n    \n      asthma\n    \n    creatinine\n0.000\n0.13505\n0.000 - 0.000\n1802.2351\n    lead\n0.002\n0.66801\n−0.008 - 0.013\n1804.2892\n    barium\n−0.003\n0.15283\n−0.007 - 0.001\n1802.4252\n    cadmium\n0.001\n0.94783\n−0.035 - 0.037\n1804.4692\n    \n      heart_failure\n    \n    creatinine\n0.000\n0.60937\n0.000 - 0.000\n-1270.1983\n    lead\n−0.003\n0.29314\n−0.008 - 0.002\n-1271.0444\n    barium\n0.000\n0.61605\n−0.002 - 0.001\n-1270.1887\n    cadmium\n0.002\n0.76814\n−0.014 - 0.019\n-1270.0237\n    \n      coronary_heart_disease\n    \n    creatinine\n0.000\n0.41578\n0.000 - 0.000\n-1147.8785\n    lead\n−0.003\n0.24778\n−0.008 - 0.002\n-1148.5536\n    barium\n0.000\n0.69466\n−0.002 - 0.002\n-1147.3691\n    cadmium\n0.014\n0.09495\n−0.003 - 0.031\n-1150.0099\n    \n      heart_attack\n    \n    creatinine\n0.000\n0.92662\n0.000 - 0.000\n-809.6718\n    lead\n−0.003\n0.29655\n−0.009 - 0.003\n-810.7556\n    barium\n−0.001\n0.35293\n−0.003 - 0.001\n-810.5283\n    cadmium\n0.026\n0.00538\n0.008 - 0.045\n-817.4306\n  \n  \n  \n\n\n\n\nAll this gt pipeline can be regrouped in one function, for example gt_models(), with only results_clean as argument. This mean that you can easily re-apply the function to each results table and get identical results!\nExercice: Create this function and add it to R/gt_models.R.\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\ngt_models &lt;- function(results_model_clean) {\n  library(gt)\n  # 1. Initialize the gt table object\n  gt(\n    data = results_short,\n    rowname_col = \"Outcome\",\n    groupname_col = \"outcomes\"\n  ) |&gt;\n    # 2. Format numbers\n    fmt_number(\n      columns = c(\"Estimate\", \"2.5 %\", \"97.5 %\"),\n      decimals = 3\n    ) |&gt;\n    fmt(\n      columns = \"Pr(&gt;|t|)\",\n      fns = \\(x) format.pval(x, digits = 3)\n    ) |&gt;\n    # 3. Merge and hide columns\n    cols_merge(\n      columns = c(\"2.5 %\", \"97.5 %\"),\n      pattern = \"{1} - {2}\"\n    ) |&gt;\n    cols_hide(\n      columns = c(\"Std. Error\", \"t value\", \"term\")\n    ) |&gt;\n    cols_label(\"2.5 %\" = \"95% CI\") |&gt;\n    # 4. Add table title and subtitle\n    tab_header(\n      title = \"Models results\"\n  )\n  \n}\n\nRemember to commit this new function and to sourceit in your main script"
  },
  {
    "objectID": "content/03_exercise_2.html#report",
    "href": "content/03_exercise_2.html#report",
    "title": "Hands-on Activity 2",
    "section": "2009 report",
    "text": "2009 report\nNow that the functions are all created, adding the analysis for the nh2009 dataset is simple as it’s only needed to apply the same function on another dataset.\nThe report can divided in two sections:\n# 2007\n\n... 2007 analysis\n\n# 2009\n... 2009 analysis\nThe onnly things that need to be copy paste is the datamangement part. The script for the 2009 analysis can look like that:\n\nload(here(\"data/nh2009.RData\"))\n\n# Descriptive stats\npurrr::map(.x = nh2009, .f = compute_descriptive_stats) |&gt;\n  dplyr::bind_rows(.id = \"column\")\n\n# List outcomes\noutcomes &lt;- c(\"asthma\", \"heart_failure\", \"coronary_heart_disease\", \"heart_attack\")\nexposures &lt;- c(\"creatinine\", \"lead\", \"barium\", \"cadmium\")\n\n\nmodels_parameters_2009 &lt;- tidyr::expand_grid(outcomes, exposures)\n\nmodels_2009 &lt;- map2(\n  .x = models_parameters_2009$outcomes,\n  .y = models_parameters_2009$exposures,\n  .f = \\(x, y) build_model(x, y, dataset = nh2009) # we need to change the dataset\n)\n\n# Extract model results\nmodels_results_2009 &lt;- map(models_2009, extract_model_result)\n\nresults_2009 &lt;- models_parameters_2009 |&gt;\n  dplyr::mutate(\n    models = models_2009,\n    models_results = models_results_2009\n  )\n\nresults_model_clean_2009 &lt;- results_2009 |&gt;\n  unnest(models_results) |&gt;\n  dplyr::filter(exposures == term) |&gt;\n  select(-models)\n\ngt_models(results_model_clean_2009)\n\nExercice: Intergrate the following lines in the report document"
  },
  {
    "objectID": "content/03_slides_theory_2.html#section",
    "href": "content/03_slides_theory_2.html#section",
    "title": "Hands-on Activity 2 - Theory",
    "section": "",
    "text": "Functional programming with purrr\nReport generation with Quarto\nTable creation with gt\nBonus: Git branch and remote repo"
  },
  {
    "objectID": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr",
    "href": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Functional Programming in R with purrr",
    "text": "Functional Programming in R with purrr\nFunctions can be easily applied to multiple elements using functional functions: special functions that uses another function as one of its arguments.\npurrr:\n\nPart of the tidyverse\nFocus on functional programming\nSimplify complex data manipulations\n\n\nThe purrr package is a part of the tidyverse suite of packages, which is designed to make data science easier and more consistent in R. purrr focuses on functional programming and helps simplify complex data manipulations, especially with lists and data frames."
  },
  {
    "objectID": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr-1",
    "href": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr-1",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Functional Programming in R with purrr",
    "text": "Functional Programming in R with purrr\n\nThe map family of functions: works by taking a vector (or list), applying a function to each of those items, and outputting the results from each function call."
  },
  {
    "objectID": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr-2",
    "href": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr-2",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Functional Programming in R with purrr",
    "text": "Functional Programming in R with purrr\n\npaste_text &lt;- function(x) { \n  paste(x, \"seconds have passed\")\n}\npurrr::map(1:5, paste_text)\n\n[[1]]\n[1] \"1 seconds have passed\"\n\n[[2]]\n[1] \"2 seconds have passed\"\n\n[[3]]\n[1] \"3 seconds have passed\"\n\n[[4]]\n[1] \"4 seconds have passed\"\n\n[[5]]\n[1] \"5 seconds have passed\"\n\n\n\nhttps://r-cubed-intermediate.rostools.org/sessions/functions\nThe name map() doesn’t mean a geographic map, it is the mathematical meaning of map: To use a function on each item in a set of items.\n\n\n\nmap(): Applies a function to each element of a list and returns a list\nmap_lgl(): Returns a logical vector\nmap_int(): Returns an integer vector\nmap_dbl(): Returns a double vector\nmap_chr(): Returns a character vector\nmap_df(): Applies a function to each element and returns a data frame"
  },
  {
    "objectID": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr-3",
    "href": "content/03_slides_theory_2.html#functional-programming-in-r-with-purrr-3",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Functional Programming in R with purrr",
    "text": "Functional Programming in R with purrr\nBenefits of Using purrr\n\nReduces redundancy\n\nWrite less code by avoiding repetitive loops\n\nIncreases code readability\n\nClear and concise syntax\n\nEasier to update and debug"
  },
  {
    "objectID": "content/03_slides_theory_2.html#dynamic-report-with-quarto",
    "href": "content/03_slides_theory_2.html#dynamic-report-with-quarto",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Dynamic Report with Quarto",
    "text": "Dynamic Report with Quarto\nWhat is Quarto?\n\nOpen-source scientific publishing system\nSupports R and Python\nIntegrates code, text, and outputs in one document (HTML, DOCX)\n\n\nQuarto by Allison Horst\n\nProduces HTML, PDF, Word documents, presentations, etc.\n\nBenefits:\n\nReproducible research\nAutomated reporting"
  },
  {
    "objectID": "content/03_slides_theory_2.html#quarto-document-structure",
    "href": "content/03_slides_theory_2.html#quarto-document-structure",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Quarto Document Structure",
    "text": "Quarto Document Structure\n  ---\n  title: \"Descriptive Statistics Report\"\n  author: \"Your Name\"\n  format: html # or docx \n  ---\n  \n  # Results\n  \n  ```{r}\n  library(purrr)\n  numeric_vars &lt;- c(\"creatinine\", \"lead\", \"barium\", \"cadmium\")\n  descriptive_stats &lt;- map(numeric_vars, ~ compute_numeric_summaries(nh2007[[.x]]))\n  descriptive_stats\n  ```\n  \n\n\nYAML header defines document metadata.\nR code chunk for analysis.\nResults section for displaying outputs."
  },
  {
    "objectID": "content/03_slides_theory_2.html#markdown",
    "href": "content/03_slides_theory_2.html#markdown",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Markdown",
    "text": "Markdown\nText formatting:\n\n**bold**,\n_italic_,\n# Headers 1,\n## Headers 2\n\nLists:\n\nUnordered lists with - or *\nOrdered lists with 1.\n\nR Code chunks:\n```{r}\nsummary(cars)\n```"
  },
  {
    "objectID": "content/03_slides_theory_2.html#table-creation-with-gt",
    "href": "content/03_slides_theory_2.html#table-creation-with-gt",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Table creation with gt",
    "text": "Table creation with gt\nCreate publication ready tables in R directly from your data.\nThere is many functions to style and format tables to match your needs:\n\nAutomatic number formating\nNice labels with special characters\nTable header spanner\nCells highlight\n\nTables can be exported in many format including html or MS Word."
  },
  {
    "objectID": "content/03_slides_theory_2.html#table-creation-with-gt-1",
    "href": "content/03_slides_theory_2.html#table-creation-with-gt-1",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Table creation with gt",
    "text": "Table creation with gt"
  },
  {
    "objectID": "content/03_slides_theory_2.html#bonus-git-branching",
    "href": "content/03_slides_theory_2.html#bonus-git-branching",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Bonus: Git branching",
    "text": "Bonus: Git branching\nBasic Git Workflow:\n\nCreate a branch: git branch new-branch-name\nSwitch to new branch: git checkout new-branch-name\nCommit changes: git add ., git commit -m \"message\"\nMerge branch: git checkout main, git merge new-branch-name\n\n\n\nIsolates development work\nAllows multiple features/bug fixes to be developed concurrently\nSimplifies collaboration and code review"
  },
  {
    "objectID": "content/03_slides_theory_2.html#bonus-git-local-and-remote",
    "href": "content/03_slides_theory_2.html#bonus-git-local-and-remote",
    "title": "Hands-on Activity 2 - Theory",
    "section": "Bonus: Git local and remote",
    "text": "Bonus: Git local and remote"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Elevate your research with reproducibility science practices: a R workshop for young researcher in epidemiology",
    "section": "",
    "text": "This workshop aims to provide young epidemiology researchers knowledge and skills to increase reproducibility of their research.\nThe first part of the workshop will begin by defining reproducibility and its importance in epidemiology, exploring associated challenges and opportunities. In the second part of the workshop, focus will be put on practical solutions and their application so that young researchers can implement in their analysis and writing."
  },
  {
    "objectID": "index.html#goals",
    "href": "index.html#goals",
    "title": "Elevate your research with reproducibility science practices: a R workshop for young researcher in epidemiology",
    "section": "Goals",
    "text": "Goals\n\nExplain what is a reproducibile analysis workflow\nShow how to improve the organisation of your R projects\nShow and apply simple tools to make your analysis code cleaner, shorter, documented and more reproducible\nIntroduce to Git to track changes in your code"
  },
  {
    "objectID": "index.html#program",
    "href": "index.html#program",
    "title": "Elevate your research with reproducibility science practices: a R workshop for young researcher in epidemiology",
    "section": "Program",
    "text": "Program\n\nIntroduction (20 minutes):\n\nWelcome\nImportance of reproducibility in epidemiology research\nThe principles of a reproducible workflow\n\nCreating and organizing a project structure for reproducibility\nAvoiding copy pasting with functions\nGit basic to keep track your code\n\n\nHands-on Activity 1: a simple reproducible project (40 minutes)\n\nHow to organize project’s files\nStyle R scripts\nFirst Git commit\nIntroduction to creating your own functions\n\nBreak (30 minutes)\nHands-on Activity 2: create a nice report (50 minutes)\n\nFunctional programming wiht purrr\nCreate a nice report with quarto\nMake nice tables using gt\nBonus: Git branch and remote repo\n\nClosing Remarks and Q&A (15 minutes)\n\nSummary of key takeaways\nResources for further learning\nOpen floor for questions and discussion"
  }
]